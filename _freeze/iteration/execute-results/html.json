{
  "hash": "152081dd62cb6b29016745d56e2eeffa",
  "result": {
    "engine": "knitr",
    "markdown": "# Iteration\n\n## Introduction and curated resources\n\n::: {.cell}\n\n:::\n\n\nSee this [article](https://dplyr.tidyverse.org/dev/articles/rowwise.html) for details on the use of dplyr for row-wise operations\n\nSee this [article](https://dplyr.tidyverse.org/dev/articles/colwise.html) for details on the use of dplyr for column-wise operations\n\nSee this [article](https://dplyr.tidyverse.org/reference/across.html) for the uses of `across()` in `summarize()` and `mutate()`\n\nuse `list_rbind()` with `map()` to bind together lists of dataframes, which is common when using `map()`\n\nIn the sections that follow, we provide common examples of approaches to iteration using the `iris` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n```\n\n\n:::\n\n```{.r .cell-code}\niris |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n\n## select() subset of columns\n\nThere is [a good tutorial](https://dplyr.tidyverse.org/reference/select.html) providing more detail on selecting subsets of columns.  Here we illustrate a few common applications in our lab.\n\nIt is easy to select a subset of columns based on their class.  Common functions for selecting on column class are \n* `is.numeric`\n* `is.factor`\n* `is.ordered`\n* `is.character`.  \n\nThese class functions are used inside of the `where()` function. For example, here we select all numeric columns.  Notice that the parentheses are left off of the `is.numeric` function when using `where()`\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> select(where(is.numeric)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 4\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n```\n\n\n:::\n:::\n\n\n...and now all factor columns\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> select(where(is.factor)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 1\n$ Species <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, setosa…\n```\n\n\n:::\n:::\n\n\nYou can also select columns based on column name. Common helper functions for this include \n\n* `starts_with()`: Starts with a prefix.\n* `ends_with()`: Ends with a suffix.\n* `contains()`: Contains a literal string.\n* `matches()`: Matches a regular expression.\n* `num_range()`: Matches a numerical range like x01, x02, x03.\n\nFor example...\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> select(contains(\"Width\")) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 2\n$ Sepal.Width <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4…\n$ Petal.Width <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2…\n```\n\n\n:::\n:::\n\n\n\n## Get summary statistics for multiple columns\n\nWe use `across()` combined with `summarize()` to get summary statistics across sets of columns. This can also be combined with `group_by()` to do this within subsets/groups for rows\nMean for all numeric columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  summarize(across(where(is.numeric), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     5.843333    3.057333        3.758    1.199333\n```\n\n\n:::\n:::\n\n\nMean for width columns grouped by Species\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  group_by(Species) |> \n  summarize(across(contains(\"Width\"), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Species    Sepal.Width Petal.Width\n  <fct>            <dbl>       <dbl>\n1 setosa            3.43       0.246\n2 versicolor        2.77       1.33 \n3 virginica         2.97       2.03 \n```\n\n\n:::\n:::\n\n\n\ndf %>%\n  summarise(across(c(col1, col2), list(mean=mean, sd=sd), na.rm=TRUE))\n  \n  \n## Apply mutate() to multiple columns\n\nWe use `across()` combined with `mutate()` to apply the same transformation or other function to multiple columns.\n\n\nmultiply values in col1 and col2 by 2\ndf %>% \n  mutate(across(c(col1, col2), function(x) x*2))\n\niris %>%\n  mutate(across(c(Sepal.Length, Sepal.Width), round))\n  \n\n## `map()` and `future_map()`\n\ncan generally return lists using `map()` and then combine into a df afterwards using `list_rbind()`\n\nCan use `pluck()` in a second map if a first map returned a list with multiple elements\n\n## `for` loops\n\nDoes someone want o do this?\n\n## `foreach` loops\n\n\n## Nesting\n\nSome useful tutorials\n\n* https://r4ds.had.co.nz/many-models.html\n* https://bookdown.org/Maxine/r4ds/nesting.html\n* https://tidyr.tidyverse.org/reference/nest.html\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}