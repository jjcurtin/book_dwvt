{
  "hash": "13a21cfc0650dd7987f8be2bea78482d",
  "result": {
    "engine": "knitr",
    "markdown": "# Quarto\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## General\n\n### YAML formats\n\n- [HTML](https://quarto.org/docs/reference/formats/html.html)\n- [PDF](https://quarto.org/docs/reference/formats/pdf.html)\n\n### CLI Rendering \n\n- quarto render filename.qmd --to pdf\n- quarto render filename.qmd --to html\n\n\n[Comprehensive guide](https://quarto.org/docs/guide/) to Quarto\n\n### Chunk options\n\nChunk options are now specified inside the r backtics, with the following syntax:\n\n`#| echo: false`  \n`#| warning: false`  \n\nTo specify these options globally, they need to be added to the `_quarto.yml` file, with these lines:\n\n`execute: `  \n&nbsp;&nbsp;&nbsp;`  echo: false`  \n&nbsp;&nbsp;&nbsp;`  warning: false`  \n\n### Figures\n\nTo be included in the quarto figure environment, a figure must have a label that starts with `fig-`. You can specify the caption as well as the output height/width (in inches) as follows:\n\n````{{r}}\n#| label: fig-1\n#| fig-cap: \"A Basic Barplot Figure\"\n#| fig-height: 6\n#| fig-width: 6\n\nggplot(data, aes(x=name, y=value)) + \n  geom_bar(stat = \"identity\")\n````\n\nTo display a code-generated figure without the caption, the label CANNOT start with `fig-`.You must also remove the `#| fig-cap:` option from the chunk, and explicitly include a height and/or width specification, this time using `out-width` and `out-height`:\n\n\n```{{r}}\n#| label: a-fig-1\n#| out-width: 6in\n#| out-height: 6in\n\nggplot(data, aes(x=name, y=value)) + \n  geom_bar(stat = \"identity\")\n```\n\n\n\n\n### Tables\n\n#### HTML\n\nPlain knitr::kable() renders a nicely striped table in HTML:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Make   |Model      | Miles Per Gallon | Cylinders | Gears |\n|:------|:----------|:----------------:|:---------:|:-----:|\n|Mazda  |RX4        |       21.0       |     6     |   4   |\n|Mazda  |RX4        |       21.0       |     6     |   4   |\n|Datsun |710        |       22.8       |     4     |   4   |\n|Hornet |4          |       21.4       |     6     |   3   |\n|Hornet |Sportabout |       18.7       |     8     |   3   |\n\n\n:::\n:::\n\n\n\nHowever, when you call kableExtra, it does away with the nice striping and spacing and you then have to define that explicitly!\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Make   |Model      | Miles Per Gallon | Cylinders | Gears |\n|:------|:----------|:----------------:|:---------:|:-----:|\n|Mazda  |RX4        |       21.0       |     6     |   4   |\n|Mazda  |RX4        |       21.0       |     6     |   4   |\n|Datsun |710        |       22.8       |     4     |   4   |\n|Hornet |4          |       21.4       |     6     |   3   |\n|Hornet |Sportabout |       18.7       |     8     |   3   |\n\n\n:::\n:::\n\n\nNote the table above, although the code is identical to the first table, has lost all formatting thanks to invoking kableExtra. The table below re-produces that via kable_styling (with additional features such as floating around text, and footnotes; although it seems the float doesn't actually work!). \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"width: auto !important; float: right; margin-left: 10px;border-bottom: 0;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Make </th>\n   <th style=\"text-align:left;\"> Model </th>\n   <th style=\"text-align:center;\"> Miles Per Gallon </th>\n   <th style=\"text-align:center;\"> Cylinders </th>\n   <th style=\"text-align:center;\"> Gears </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Mazda </td>\n   <td style=\"text-align:left;\"> RX4 </td>\n   <td style=\"text-align:center;\"> 21.0 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mazda </td>\n   <td style=\"text-align:left;\"> RX4 </td>\n   <td style=\"text-align:center;\"> 21.0 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Datsun </td>\n   <td style=\"text-align:left;\"> 710 </td>\n   <td style=\"text-align:center;\"> 22.8 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Hornet </td>\n   <td style=\"text-align:left;\"> 4 </td>\n   <td style=\"text-align:center;\"> 21.4 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Hornet </td>\n   <td style=\"text-align:left;\"> Sportabout </td>\n   <td style=\"text-align:center;\"> 18.7 </td>\n   <td style=\"text-align:center;\"> 8 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n</tbody>\n<tfoot>\n<tr><td style=\"padding: 0; \" colspan=\"100%\"><span style=\"font-style: italic;\">Note: </span></td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup></sup> Here is a general comments of the table. </td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>1</sup> Footnote 1; </td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>2</sup> Footnote 2; </td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>a</sup> Footnote A; </td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>b</sup> Footnote B; </td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>*</sup> Footnote Symbol 1; </td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>â€ </sup> Footnote Symbol 2</td></tr>\n</tfoot>\n</table>\n\n`````\n:::\n:::\n\n\nAdditional HTML-only features of kableExtra are documented [here](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html#HTML_Only_Features)\n\n\n#### PDF\n\nIf using the [typst APAish manuscript](https://github.com/mvuorre/quarto-apaish) extension, note that Quarto 1.4XXX uses an older version of Typst without good table support. That should be fixed in the 1.5 release.\n\n\nThe documentation for producing LaTeX tables in kableExtra is [here](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf)\n\nThe following two tables demonstrate a complex table of the type used in the PDF ema and burden papers (here replicated with a far simpler dataset). This first table is the table code as extracted directly from the manuscript, with no additional formatting. It displays not unlike an HTML table:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;border-bottom: 0;\">\n<caption>Iris</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-style: italic;text-align: center;\">  </th>\n   <th style=\"text-align:center;font-style: italic;text-align: center;\"> N </th>\n   <th style=\"text-align:center;font-style: italic;text-align: center;\"> % </th>\n  </tr>\n </thead>\n<tbody>\n  <tr grouplength=\"2\"><td colspan=\"3\" style=\"border-bottom: 1px solid;\">Setosa</td></tr>\n<tr>\n   <td style=\"text-align:left;padding-left: 2em;\" indentlevel=\"1\"> large </td>\n   <td style=\"text-align:center;\"> NA </td>\n   <td style=\"text-align:center;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;padding-left: 2em;\" indentlevel=\"1\"> small </td>\n   <td style=\"text-align:center;\"> 50 </td>\n   <td style=\"text-align:center;\"> 0.3 </td>\n  </tr>\n  <tr grouplength=\"2\"><td colspan=\"3\" style=\"border-bottom: 1px solid;\">Versicolor</td></tr>\n<tr>\n   <td style=\"text-align:left;padding-left: 2em;\" indentlevel=\"1\"> large </td>\n   <td style=\"text-align:center;\"> 43 </td>\n   <td style=\"text-align:center;\"> 0.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;padding-left: 2em;\" indentlevel=\"1\"> small </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 0.0 </td>\n  </tr>\n  <tr grouplength=\"2\"><td colspan=\"3\" style=\"border-bottom: 1px solid;\">Virginica</td></tr>\n<tr>\n   <td style=\"text-align:left;padding-left: 2em;\" indentlevel=\"1\"> large </td>\n   <td style=\"text-align:center;\"> 50 </td>\n   <td style=\"text-align:center;\"> 0.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;padding-left: 2em;\" indentlevel=\"1\"> small </td>\n   <td style=\"text-align:center;\"> NA </td>\n   <td style=\"text-align:center;\"> NA </td>\n  </tr>\n</tbody>\n<tfoot>\n<tr><td style=\"padding: 0; \" colspan=\"100%\"><span style=\"font-style: italic;\">Note: </span></td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup></sup> N = 75</td></tr>\n</tfoot>\n</table>\n\n`````\n:::\n:::\n\n\nIn LaTeX, this table displays quite differently. Below, the same code has been modified to reproduce *exactly* the look of the table as it appears in the PDF manuscript. That is, the code in the chunk above produces the output below when rendered with knitr to PDF; but rendering that output to HTML requires the additions in the chunk below:\n\n* `bootstrap_options = \"none\"` added to kable_styling removes the default horizontal lines, under each row, but then font size and table width must now be specified. \n* `pack_rows()` adds horizontal lines in HTML but not LaTeX; those must be removed with the `label_row_css` option . \n* Finally, column width is specified, and horizontal lines around the column headers and before the footnote, are added with `row_spec()`'s `extra_css` option.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table style=\"font-size: 12px; margin-left: auto; margin-right: auto;border-bottom: 0;\">\n<caption style=\"font-size: initial !important;\">Iris</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-style: italic;text-align: center;border-bottom: 1px solid; border-top: 1px solid\">  </th>\n   <th style=\"text-align:center;font-style: italic;text-align: center;border-bottom: 1px solid; border-top: 1px solid\"> N </th>\n   <th style=\"text-align:center;font-style: italic;text-align: center;border-bottom: 1px solid; border-top: 1px solid\"> % </th>\n  </tr>\n </thead>\n<tbody>\n  <tr grouplength=\"2\"><td colspan=\"3\" style=\"border-bottom: none;\">Setosa</td></tr>\n<tr>\n   <td style=\"text-align:left;padding-left: 2em;width: 4in; \" indentlevel=\"1\"> large </td>\n   <td style=\"text-align:center;width: 1in; \">  </td>\n   <td style=\"text-align:center;width: 1in; \">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;padding-left: 2em;width: 4in; \" indentlevel=\"1\"> small </td>\n   <td style=\"text-align:center;width: 1in; \"> 50 </td>\n   <td style=\"text-align:center;width: 1in; \"> 0.3 </td>\n  </tr>\n  <tr grouplength=\"2\"><td colspan=\"3\" style=\"border-bottom: none;\">Versicolor</td></tr>\n<tr>\n   <td style=\"text-align:left;padding-left: 2em;width: 4in; \" indentlevel=\"1\"> large </td>\n   <td style=\"text-align:center;width: 1in; \"> 43 </td>\n   <td style=\"text-align:center;width: 1in; \"> 0.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;padding-left: 2em;width: 4in; \" indentlevel=\"1\"> small </td>\n   <td style=\"text-align:center;width: 1in; \"> 7 </td>\n   <td style=\"text-align:center;width: 1in; \"> 0.0 </td>\n  </tr>\n  <tr grouplength=\"2\"><td colspan=\"3\" style=\"border-bottom: none;\">Virginica</td></tr>\n<tr>\n   <td style=\"text-align:left;padding-left: 2em;width: 4in; \" indentlevel=\"1\"> large </td>\n   <td style=\"text-align:center;width: 1in; \"> 50 </td>\n   <td style=\"text-align:center;width: 1in; \"> 0.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;padding-left: 2em;width: 4in; border-bottom: 1px solid\" indentlevel=\"1\"> small </td>\n   <td style=\"text-align:center;width: 1in; border-bottom: 1px solid\">  </td>\n   <td style=\"text-align:center;width: 1in; border-bottom: 1px solid\">  </td>\n  </tr>\n</tbody>\n<tfoot>\n<tr><td style=\"padding: 0; \" colspan=\"100%\"><span style=\"font-style: italic;\">Note: </span></td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup></sup> N = 75</td></tr>\n</tfoot>\n</table>\n\n`````\n:::\n:::\n\n\n#### Useful Table Options and features\n\nTo be sure tables display with NA cells as blanks (instead of \"NA\") include this before your first table:\n\n`options(knitr.kable.NA = \"\")`\n\nkableExtra has a function is collapse_rows, yet that seems to be [persistently](https://stackoverflow.com/questions/73789357/kableextra-html-table-not-collapsing-rows) [broken](https://github.com/haozhu233/kableExtra/issues/624)\n\n`row_spec()` has a parameter, `hline_after`, which, ostensibly, should create a horizontal line under that row, right? Apparently it [only works on LaTeX](https://stackoverflow.com/questions/53655983/row-spec-function-from-kableextra-does-not-create-a-horizontal-line-in-html-ou) although this is undocumented. Apparently the solution is to add `row_spec(X, extra_css = \"border-bottom: 1px solid\"))` (where x is the rownum; 0 for the header, `nrow(df)` for the last row)\n\nSimilarly, to supress hlines on headers created by `pack_rows()`, you need to add `extra_css = \"border-bottom: none\"` into the `pack_rows()` command.\n\n\n\n\n### Rendering\n\n#### Single-page rendering\n\nHitting the Render button renders the single active document. This will be the primary method of rendering for analysis documents, manuscripts, and presentations. \n\nThis method can also be used to re-render a single chapter in a book or a single page on a website.\n\n#### Full book/website rendering\n\nFor books and websites, which have many .qmd documents linked together, you would render the full book by calling `quarto::quarto_render()` to render all documents in the active project directory.\n\nFor books and websites, if anything changes in the .yml file (such as addition or deletion of a chapter), you MUST re-render the entire directory in this manner, otherwise the added/deleted chapter will not be rendered correctly.\n\n\n#### Rendering other formats and targets\n\nYou can specify render targets and document render ordering more specifically in project metadata, see https://quarto.org/docs/projects/quarto-projects.html#render-targets\n\n#### PDF\n\nYou can specify rendering to PDF format by adding the following to your .yml file:\n\nformat:\n  pdf: \n    documentclass: book\n\nYou can then explictly render just the PDF format by specifying both the output format and the filename in the call to quarto_render:\n\nquarto::quarto_render(output_format = \"pdf\",output_file = \"dwt.pdf\")\n\n##### PDF Fonts\nTo specify a font you add the following to the YAML:\n\nIf using Xelatex:  \n`mainfont : FontName # for document text`  \n`sansfont : FontName # for H1-H6 text`  \n`monofont : FontName  # for code chunk text`   \n\nIf using pdflatex:  \n`fontfamily : FontName # for document text`\n\nWhere `FontName` is the name of your desired system font. To find available system fonts, run, `systemfonts::system_fonts()` and look for the *name* of the font (not the name of the font .tff file). For example, if you wish to use Arial font, your `FontName` should be \"ArialMT\", rather than \"arial\" or \"Arial\".\n\n## Documents\n\nWe use Quarto documents for two purposes - reproducible analyses and submitted papers.  We will generally render analysis doc to html and papers to pdf.  The Quarto Guide provides more detail on on creating [pdf](https://quarto.org/docs/output-formats/pdf-basics.html) and [html](https://quarto.org/docs/output-formats/html-basics.html)\n\nThese documents are styled primarily using Markdown.  The Quarto Guide provides more detail on [markdown basics](https://quarto.org/docs/authoring/markdown-basics.html)\n\n\n## Journal Articles\n\n### Templates\n\nQuarto does have a system for applying journal article templates to quarto docs, see [this reference page](https://quarto.org/docs/journals/)\n\nThe list of available templates is still somewhat small, but extending them seems doable.\n\n* [Info on creating a custom template](https://quarto.org/docs/journals/formats.html)\n* [Template for creating a custom template](https://github.com/quarto-journals/article-format-template)\n\n\nRelated reference links for creating an AJP template:\n\n* [AJP Manuscript requirements](https://ajp.psychiatryonline.org/ajp_ifora )  \n* [Example AJP Latex Template](https://tex.stackexchange.com/questions/127639/template-for-american-journal-of-psychiatry)\n* [More APA style templates](https://www.overleaf.com/latex/templates/tagged/apa)  \n* [Typst APAish manuscript](https://github.com/mvuorre/quarto-apaish)\n\n\n### Bibliographies\nTo add a bibliography with a citation style, add the following lines to the _quarto.yml or the .qmd file:\n\n`bibliography: references.bib`  \n`csl: name_of_csl_file.csl`  \n\nFor a [typst APAish manuscript](https://github.com/mvuorre/quarto-apaish) your yaml will look like this to use the built-in typst citation style:\n\n`bibliography: references.bib`  \n`bibliographystyle: apa`\n\nOr download a local copy of the desired .csl file:  \n`bibliography: references.bib`  \n`bibliographystyle: name_of_csl_file.csl`\n\nAt the moment, this extension doesn't support linking to the CSL repo (below).\n\n\nNote, we will typically call our csl files from [the official Citation Style Language Repo](https://github.com/citation-style-language/styles); which simply requires the URL of the raw file from github.\n\nSee [docs_arc](https://jjcurtin.github.io/docs_arc/resources.html) for specifics about commonly-used ARC csl files.\n\nThe Quarto Guide provides more detail about how to work with [citations and footnotes](https://quarto.org/docs/authoring/footnotes-and-citations.html). As with markdown, the format is `[@citekey1; @citekey2]` â€” citations go inside square brackets and are separated by semicolons\n\n## Reproducible Analyses\n\n\n## Presentations\n\nWe use Quarto to make revealjs slide decks for presentations.  The Quarto Guide provides extensive documentation and sample slides.  You can begin with the [overview](https://quarto.org/docs/presentations) of presentations across formats (Quarto can also render powerpoint and other formats).  Follow this with a [revealjs overview](https://quarto.org/docs/presentations/revealjs/) and then the revealjs [reference chapter](https://quarto.org/docs/reference/formats/presentations/revealjs.html).  The Quarto Guide also provides a [chapter on presenter tools](https://quarto.org/docs/presentations/revealjs/presenting.html).\n\n\nDivs (:::) and spans([]) are used extensively in presentations.  An introduction to their use is provided in the [markdown basics chapter](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans). The Pandoc manual provides [more detail](https://pandoc.org/MANUAL.html#divs-and-spans).\n\nIn a project, presentations should be located in subfolder that starts with an underscore, ie. _presentations, to prevent those files from being rendered during the project render.\n\n## Books and Websites\n\nInformation on setting up a book: <https://quarto.org/docs/books/>\n\nInformation on setting up a website: <https://quarto.org/docs/websites/> \n\nInformation on setting up Github Pages to publish a book/website on commit: <https://quarto.org/docs/publishing/github-pages.html#render-to-docs>\n\nThe difference between a book and a website in quarto is the syntax in the `_quarto.yml` file. Books have chapters, websites have sections; there are also a few differences in the types of metadata options you can specify (for example, books have titles and authors, websites do not). The main visible difference in the published output is that book chapters are numbered, while website sections are not. \n\n\n## Publishing\n\nYou can [publish](https://quarto.org/docs/publishing) documents, books, and presentations to a variety of places.\n\n### Presentations and Documents \nOur preferred location for presentations (and Quarto Docs) is [Quarto Pub](https://quartopub.com/).  This site is public and free.  To use it, you need to set up an account first.\n\nTo publish a presentation (or other Quarto doc) to Quarto Pub, you should first log in on your default browsers.  You should next go to the Terminal tab in the RStudio IDE.  Navigate to the folder that contains your presentation.  Then type `quarto publish quarto-pub`.  If this is the first time you are publishing at Quarto Pub on that computer, you will need to authorize it.  Follow the prompts in the web browser and then in the terminal to complete the publication process.  This authorization is saved in a file called _publish.yml, which will be accessed for future updates to the presentation.\n\nSee [additional instructions](https://quarto.org/docs/publishing/quarto-pub.html) in the Quarto guide if necessary.\n\n### Books and Websites\n\nWe have chosen to use Github Pages to publish several of our books. See [this link](https://quarto.org/docs/publishing/github-pages.html) for detailed information on setting up your repo to have a Github Page and to use Github Actions to publish. \n\nBasically, any commit which includes changed html files tells Github Actions to re-build the book. The publishing workflow therefore consists of a) rendering locally, and b) committing the newly-rendered documents via github desktop. It usually takes <2 minutes for Github Actions to build and deploy the updated pages\n\n\n## Terminal Commands\n\n* `quarto publish quarto-pub` to publish a presentation or document to Quarto Pub\n\n* \n\n## Latex and Quarto\n\nFormatting of a PDF rendered from Quarto can be finely controlled with the addition of LaTeX commands. See [this Quarto reference](https://quarto.org/docs/output-formats/pdf-basics.html) as well as some examples below: \n\n### Inline Commands\n\nCertain latex commands can be placed in qmd files as plaintext (on their own line, with surrounding blank lines), for example: `\\newpage` starts a new page, `\\hline` adds a horizontal line.\n\n### Chunk Commands\n\nMultiline commands can be wrapped in latex code chunks:\n\n\n```{=latex}\n#| echo: true\n\\begin{tabular}{ll}\nA & B \\\\\nA & B \\\\\n\\end{tabular}\n```\n\n\n### YAML Commands\n`\\raggedright` added to the inclde-in-header YAML command, ensures lines are flush with the left margin and ragged on the right margin (vs justified where text is stretched to ensure both margins are flush)\n\n### Packages\n\n`\\usepackage{wrapfig}` - allow text wrapping\n`\\usepackage{float}` - allow use of float options such as H (use UPPERCASE to preserve floats)\n`\\usepackage{caption}` - allows supression of automatic caption numbering\n`\\usepackage{lscape}` - allows insertion of a landscape oriented page\n[`\\usepackage{enumitem}`](https://ctan.math.illinois.edu/macros/latex/contrib/enumitem/enumitem.pdf) - allows fine-grain control over list styling\n\n### Re-render and freeze\n\nhttps://quarto.org/docs/projects/code-execution.html\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}