# Quarto

```{r}
#| echo: false
library(tidyverse)
```


## General

### YAML formats

- [HTML](https://quarto.org/docs/reference/formats/html.html)
- [PDF](https://quarto.org/docs/reference/formats/pdf.html)


[Comprehensive guide](https://quarto.org/docs/guide/) to Quarto

### Chunk options

Chunk options are now specified inside the r backtics, with the following syntax:

`#| echo: false`  
`#| warning: false`  

To specify these options globally, they need to be added to the `_quarto.yml` file, with these lines:

`execute: `  
&nbsp;&nbsp;&nbsp;`  echo: false`  
&nbsp;&nbsp;&nbsp;`  warning: false`  

### Figures

To be included in the quarto figure environment, a figure must have a label that starts with `fig-`. You can specify the caption as well as the output height/width (in inches) as follows:

````{{r}}
#| label: fig-1
#| fig-cap: "A Basic Barplot Figure"
#| fig-height: 6
#| fig-width: 6

ggplot(data, aes(x=name, y=value)) + 
  geom_bar(stat = "identity")
````

To display a code-generated figure without the caption, the label CANNOT start with `fig-`.You must also remove the `#| fig-cap:` option from the chunk, and explicitly include a height and/or width specification, this time using `out-width` and `out-height`:


```{{r}}
#| label: a-fig-1
#| out-width: 6in
#| out-height: 6in

ggplot(data, aes(x=name, y=value)) + 
  geom_bar(stat = "identity")
```




### Tables

#### HTML

Plain knitr::kable() renders a nicely striped table in HTML:

```{r}
#| echo: false
#| warning: false

mtcars %>% 
  select(mpg, cyl, gear) %>%
  head(5) %>%
  rownames_to_column("make") %>%
  mutate(model = word(make, start = 2),
    make = word(make)) %>% 
  relocate(model, .after="make") %>%
  knitr::kable(.,
        align = c("l", "l", "c", "c", "c"),
        col.names = c("Make", "Model", "Miles Per Gallon", "Cylinders", "Gears"))


```


However, when you call kableExtra, it does away with the nice striping and spacing and you then have to define that explicitly!

```{r}
#| echo: false
#| warning: false

library(kableExtra, exclude="group_rows")

mtcars %>% 
  select(mpg, cyl, gear) %>%
  head(5) %>%
  rownames_to_column("make") %>%
  mutate(model = word(make, start = 2),
    make = word(make)) %>% 
  relocate(model, .after="make") %>%
  knitr::kable(.,
        align = c("l", "l", "c", "c", "c"),
        col.names = c("Make", "Model", "Miles Per Gallon", "Cylinders", "Gears")) 


```

Note the table above, although the code is identical to the first table, has lost all formatting thanks to invoking kableExtra. The table below re-produces that via kable_styling (with additional features such as floating around text, and footnotes; although it seems the float doesn't actually work!). 


```{r}
#| echo: false
#| warning: false


mtcars %>% 
  select(mpg, cyl, gear) %>%
  head(5) %>%
  rownames_to_column("make") %>%
  mutate(model = word(make, start = 2),
    make = word(make)) %>% 
  relocate(model, .after="make") %>%
  kbl(.,format = "html",
        align = c("l", "l", "c", "c", "c"),
        col.names = c("Make", "Model", "Miles Per Gallon", "Cylinders", "Gears")) %>%
  kable_styling(bootstrap_options = "striped",
                full_width = F,
                position = "float_right") %>%
  footnote(general = "Here is a general comments of the table. ",
           number = c("Footnote 1; ", "Footnote 2; "),
           alphabet = c("Footnote A; ", "Footnote B; "),
           symbol = c("Footnote Symbol 1; ", "Footnote Symbol 2")
           )
           
```

Additional HTML-only features of kableExtra are documented [here](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html#HTML_Only_Features)


#### PDF

If using the [typst APAish manuscript](https://github.com/mvuorre/quarto-apaish) extension, note that Quarto 1.4XXX uses an older version of Typst without good table support. That should be fixed in the 1.5 release.


The documentation for producing LaTeX tables in kableExtra is [here](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf)

The following two tables demonstrate a complex table of the type used in the PDF ema and burden papers (here replicated with a far simpler dataset). This first table is the table code as extracted directly from the manuscript, with no additional formatting. It displays not unlike an HTML table:

```{r}
#| echo: false
#| warning: false

# display and format table
iris %>% 
  mutate(size = if_else(Petal.Width > 1, "large", "small")) %>%
  group_by(Species, size) %>% 
  tally() %>%
  mutate(perc = n/nrow(iris)) %>% 
  rbind(tibble(Species = "setosa", size = "large")) %>%
  rbind(tibble(Species = "virginica", size = "small")) %>%
  arrange(Species, size) %>% 
  ungroup() %>% 
  select(-Species) %>%    # TABLE CODE STARTS HERE vv 
  kbl(longtable = TRUE,
      booktabs = T,
      col.names = c("", "N", "%"),
      align = c("l", "c", "c"),
      digits = 1,
      caption = "Iris") %>%
  kable_styling() %>% 
  row_spec(row = 0, align = "c", italic = TRUE) %>% 
  pack_rows("Setosa", 1, 2, bold = FALSE) %>% 
  pack_rows("Versicolor", 3, 4, bold = FALSE) %>% 
  pack_rows("Virginica", 5, 6, bold = FALSE)  %>% 
  footnote(general="N = 75", threeparttable = TRUE) 

```

In LaTeX, this table displays quite differently. Below, the same code has been modified to reproduce *exactly* the look of the table as it appears in the PDF manuscript. That is, the code in the chunk above produces the output below when rendered with knitr to PDF; but rendering that output to HTML requires the additions in the chunk below:

* `bootstrap_options = "none"` added to kable_styling removes the default horizontal lines, under each row, but then font size and table width must now be specified. 
* `pack_rows()` adds horizontal lines in HTML but not LaTeX; those must be removed with the `label_row_css` option . 
* Finally, column width is specified, and horizontal lines around the column headers and before the footnote, are added with `row_spec()`'s `extra_css` option.

```{r}
#| echo: false
#| warning: false


options(knitr.kable.NA = "")

# display and format table
iris %>% 
  mutate(size = if_else(Petal.Width > 1, "large", "small")) %>%
  group_by(Species, size) %>% 
  tally() %>%
  mutate(perc = n/nrow(iris)) %>% 
  rbind(tibble(Species = "setosa", size = "large")) %>%
  rbind(tibble(Species = "virginica", size = "small")) %>%
  arrange(Species, size) %>% 
  ungroup() %>% 
  select(-Species) %>%  # TABLE CODE STARTS HERE vv 
  kbl(longtable = TRUE,
      booktabs = T,
      col.names = c("", "N", "%"),
      align = c("l", "c", "c"),
      digits = 1,
      caption = "Iris") %>%
  kable_styling(bootstrap_options = "none", #remove all horizontal lines; must now specify font size and table width
                font_size = 12,
                full_width = TRUE) %>% 
  row_spec(row = 0, align = "c", italic = TRUE) %>% 
  pack_rows("Setosa", 1, 2, bold = FALSE, label_row_css = "border-bottom: none;") %>%  #remove horizontal line below packed rows
  pack_rows("Versicolor", 3, 4, bold = FALSE, label_row_css = "border-bottom: none;") %>%  #remove horizontal line below packed rows
  pack_rows("Virginica", 5, 6, bold = FALSE, label_row_css = "border-bottom: none;")  %>%  #remove horizontal line below packed rows
  footnote(general="N = 75", threeparttable = TRUE) %>%
  column_spec(1, width = "4in") %>% #specify column width
  column_spec(2:3, width = "1in") %>% #specify column width
  row_spec(0, extra_css = "border-bottom: 1px solid; border-top: 1px solid") %>% #add borders on the header row
  row_spec(6, extra_css = "border-bottom: 1px solid") #add a border after the last row, before the footnote
```

#### Useful Table Options and features

To be sure tables display with NA cells as blanks (instead of "NA") include this before your first table:

`options(knitr.kable.NA = "")`

kableExtra has a function is collapse_rows, yet that seems to be [persistently](https://stackoverflow.com/questions/73789357/kableextra-html-table-not-collapsing-rows) [broken](https://github.com/haozhu233/kableExtra/issues/624)

`row_spec()` has a parameter, `hline_after`, which, ostensibly, should create a horizontal line under that row, right? Apparently it [only works on LaTeX](https://stackoverflow.com/questions/53655983/row-spec-function-from-kableextra-does-not-create-a-horizontal-line-in-html-ou) although this is undocumented. Apparently the solution is to add `row_spec(X, extra_css = "border-bottom: 1px solid"))` (where x is the rownum; 0 for the header, `nrow(df)` for the last row)

Similarly, to supress hlines on headers created by `pack_rows()`, you need to add `extra_css = "border-bottom: none"` into the `pack_rows()` command.




### Rendering

For rendering books and slides, we have written a bash script to handle setting the `_quarto.yml` file and then rendering the full project or a single file.  

- call the function from the terminal: `./render.sh filename.qmd book`
- the first parameter can be the name of the qmd file or `all` to render all units (only used for books, not slides)
- the second parameter can be `book`, `slides` or `slides_wide`

#### Full book/website rendering

For books and websites, which have many .qmd documents linked together, you would render the full book by calling `quarto::quarto_render()` to render all documents in the active project directory.

For books and websites, if anything changes in the .yml file (such as addition or deletion of a chapter), you MUST re-render the entire directory in this manner, otherwise the added/deleted chapter will not be rendered correctly.


#### Rendering other formats and targets

You can specify render targets and document render ordering more specifically in project metadata, see https://quarto.org/docs/projects/quarto-projects.html#render-targets

#### PDF

You can specify rendering to PDF format by adding the following to your .yml file:

format:
  pdf: 
    documentclass: book

You can then explictly render just the PDF format by specifying both the output format and the filename in the call to quarto_render:

quarto::quarto_render(output_format = "pdf",output_file = "dwt.pdf")

##### PDF Fonts
To specify a font you add the following to the YAML:

If using Xelatex:  
`mainfont : FontName # for document text`  
`sansfont : FontName # for H1-H6 text`  
`monofont : FontName  # for code chunk text`   

If using pdflatex:  
`fontfamily : FontName # for document text`

Where `FontName` is the name of your desired system font. To find available system fonts, run, `systemfonts::system_fonts()` and look for the *name* of the font (not the name of the font .tff file). For example, if you wish to use Arial font, your `FontName` should be "ArialMT", rather than "arial" or "Arial".

## Documents

We use Quarto documents for two purposes - reproducible analyses and submitted papers.  We will generally render analysis doc to html and papers to pdf.  The Quarto Guide provides more detail on on creating [pdf](https://quarto.org/docs/output-formats/pdf-basics.html) and [html](https://quarto.org/docs/output-formats/html-basics.html)

These documents are styled primarily using Markdown.  The Quarto Guide provides more detail on [markdown basics](https://quarto.org/docs/authoring/markdown-basics.html)


## Journal Articles

### Templates

Quarto does have a system for applying journal article templates to quarto docs, see [this reference page](https://quarto.org/docs/journals/)

The list of available templates is still somewhat small, but extending them seems doable.

* [Info on creating a custom template](https://quarto.org/docs/journals/formats.html)
* [Template for creating a custom template](https://github.com/quarto-journals/article-format-template)


Related reference links for creating an AJP template:

* [AJP Manuscript requirements](https://ajp.psychiatryonline.org/ajp_ifora )  
* [Example AJP Latex Template](https://tex.stackexchange.com/questions/127639/template-for-american-journal-of-psychiatry)
* [More APA style templates](https://www.overleaf.com/latex/templates/tagged/apa)  
* [Typst APAish manuscript](https://github.com/mvuorre/quarto-apaish)


### Bibliographies
To add a bibliography with a citation style, add the following lines to the _quarto.yml or the .qmd file:

`bibliography: references.bib`  
`csl: name_of_csl_file.csl`  

For a [typst APAish manuscript](https://github.com/mvuorre/quarto-apaish) your yaml will look like this to use the built-in typst citation style:

`bibliography: references.bib`  
`bibliographystyle: apa`

Or download a local copy of the desired .csl file:  
`bibliography: references.bib`  
`bibliographystyle: name_of_csl_file.csl`

At the moment, this extension doesn't support linking to the CSL repo (below).


Note, we will typically call our csl files from [the official Citation Style Language Repo](https://github.com/citation-style-language/styles); which simply requires the URL of the raw file from github.

See [docs_arc](https://jjcurtin.github.io/docs_arc/resources.html) for specifics about commonly-used ARC csl files.

The Quarto Guide provides more detail about how to work with [citations and footnotes](https://quarto.org/docs/authoring/footnotes-and-citations.html). As with markdown, the format is `[@citekey1; @citekey2]` — citations go inside square brackets and are separated by semicolons

## Reproducible Analyses


## Presentations

We use Quarto to make revealjs slide decks for presentations.  The Quarto Guide provides extensive documentation and sample slides.  You can begin with the [overview](https://quarto.org/docs/presentations) of presentations across formats (Quarto can also render powerpoint and other formats).  Follow this with a [revealjs overview](https://quarto.org/docs/presentations/revealjs/) and then the revealjs [reference chapter](https://quarto.org/docs/reference/formats/presentations/revealjs.html).  The Quarto Guide also provides a [chapter on presenter tools](https://quarto.org/docs/presentations/revealjs/presenting.html).


Divs (:::) and spans([]) are used extensively in presentations.  An introduction to their use is provided in the [markdown basics chapter](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans). The Pandoc manual provides [more detail](https://pandoc.org/MANUAL.html#divs-and-spans).

In a project, presentations should be located in subfolder that starts with an underscore, ie. _presentations, to prevent those files from being rendered during the project render.

## Books and Websites

Information on setting up a book: <https://quarto.org/docs/books/>

Information on setting up a website: <https://quarto.org/docs/websites/> 

Information on setting up Github Pages to publish a book/website on commit: <https://quarto.org/docs/publishing/github-pages.html#render-to-docs>

The difference between a book and a website in quarto is the syntax in the `_quarto.yml` file. Books have chapters, websites have sections; there are also a few differences in the types of metadata options you can specify (for example, books have titles and authors, websites do not). The main visible difference in the published output is that book chapters are numbered, while website sections are not. 


## Publishing

You can [publish](https://quarto.org/docs/publishing) documents, books, and presentations to a variety of places.

### Presentations and Documents 
Our preferred location for presentations (and Quarto Docs) is [Quarto Pub](https://quartopub.com/).  This site is public and free.  To use it, you need to set up an account first.

To publish a presentation (or other Quarto doc) to Quarto Pub, you should first log in on your default browsers.  You should next go to the Terminal tab in the RStudio IDE.  Navigate to the folder that contains your presentation.  Then type `quarto publish quarto-pub`.  If this is the first time you are publishing at Quarto Pub on that computer, you will need to authorize it.  Follow the prompts in the web browser and then in the terminal to complete the publication process.  This authorization is saved in a file called _publish.yml, which will be accessed for future updates to the presentation.

See [additional instructions](https://quarto.org/docs/publishing/quarto-pub.html) in the Quarto guide if necessary.

### Books and Websites

We have chosen to use Github Pages to publish several of our books. See [this link](https://quarto.org/docs/publishing/github-pages.html) for detailed information on setting up your repo to have a Github Page and to use Github Actions to publish. 

Basically, any commit which includes changed html files tells Github Actions to re-build the book. The publishing workflow therefore consists of a) rendering locally, and b) committing the newly-rendered documents via github desktop. It usually takes <2 minutes for Github Actions to build and deploy the updated pages


## Terminal Commands

- `quarto publish quarto-pub` to publish a presentation or document to Quarto Pub
- `quarto render filename.qmd --to pdf`
- `quarto render filename.qmd --to html`
- `quarto render docname.qmd -o outputname.html`
- `quarto render docname.qmd -P pv1:1 -P pv2:5`
- `/opt/quarto/"${QUARTO_VERSION}"/bin/quarto check` to check installation details 

## Latex and Quarto

Formatting of a PDF rendered from Quarto can be finely controlled with the addition of LaTeX commands. See [this Quarto reference](https://quarto.org/docs/output-formats/pdf-basics.html) as well as some examples below: 

### Inline Commands

Certain latex commands can be placed in qmd files as plaintext (on their own line, with surrounding blank lines), for example: `\newpage` starts a new page, `\hline` adds a horizontal line.

### Chunk Commands

Multiline commands can be wrapped in latex code chunks:

```{=latex}
#| echo: true
\begin{tabular}{ll}
A & B \\
A & B \\
\end{tabular}
```

### YAML
`\raggedright` added to the include-in-header YAML command, ensures lines are flush with the left margin and ragged on the right margin (vs justified where text is stretched to ensure both margins are flush)


We wuse the following in the YAML header to set up a html document to render as a single file with a TOC.
```{r}
#| eval: false

format: 
  html: 
    embed-resources: true
    toc: true 
    toc_depth: 4
```

### Packages

`\usepackage{wrapfig}` - allow text wrapping
`\usepackage{float}` - allow use of float options such as H (use UPPERCASE to preserve floats)
`\usepackage{caption}` - allows supression of automatic caption numbering
`\usepackage{lscape}` - allows insertion of a landscape oriented page
[`\usepackage{enumitem}`](https://ctan.math.illinois.edu/macros/latex/contrib/enumitem/enumitem.pdf) - allows fine-grain control over list styling

### Re-render and freeze

https://quarto.org/docs/projects/code-execution.html

## Using Parameters

You define parameters in the YAML using the syntax below

* You can assign initial values to the parameters.  These values will be used by default if you do not replace them with new values from the command line when you render the script.
* You can update these values with new values you pass in when you render the script (see below).    
* If you only provide a subset of updated parameter values when you render the document, the default values will be used for the remaining parameters.

```{r}
#| eval: false

params:
  pv1: 5
  pv2: 10
```

In some instances, I prefer to assign the values from the params list to individual variables

* Code is shorter when using these variables
* I can update them interactively if I want to use different values (the params list is read-only)

First set the parameters in the YAML as above.  Then put this code chunk right at the top of the script.   If you edit this code chunk to assign new values interactively, make sure you comment it out when you save the final script!
```{r}
#| eval: false

pv1 <- params$pv1
pv2 <- params$pv2
# pv1 <- 5 # Use this line to interactively assign new value
# pv2 <- 10 # use this line to interactively assign new value
```


### Using parameter values
When you use params in the YAML, a list named `params` is created.  

* You can then use this list as normal with no further code needed to establish the values.
```{r}
#| eval: false

params$pv1 + params$pv2
```

* You can also access these values using inline r statements. See example below.  I strongly recommend using this in the title of your document so that you can confirm that you correctly updated the parameter values when you rendered!  e.g.,

```{r}
#| eval: false

title: "Demo of quarto document with pv1 = `r params$pv1` and  pv2 = `r params$pv2`."
```

* Or if you assigned the parameter values to variables as I recommended, you can just use those variables as you normally would.  They will start with the values assigned to associated parameters (in YAML or input from command line)

### Passing parameter values at command line

I prefer to render quarto documents in the terminal.  

* You can indicate the output filename (otherwise, the output file name is set to the input filename with a different extension).  
* You can also pass in values to the parameters, which is typically why we use parameters in the first place

Use the following syntax to render quarto documents at command line.

* use -P to provide a parameter value.  No space between parameter name and value.  If you provide values for only a subset of parameters, defaults will be used for other parameters
* use `-o` to specify filename (defaults to input filename if not provided).

```{r}
#| eval: false

quarto render docname.qmd -o outputname.html  -P pv1:1 -P pv2:5
```

## Manuscript Projects
As of 2024 our preferred method for creating reproducible analysis is to have a [quarto project](https://quarto.org/docs/projects/quarto-projects.html) for each study.  

A project allows you to connect a website, presentations (both slidesets and posters), and PDFs/word documents  to a set of analysis notebooks (formerly our ana_.Rmd files). That way, code across all output formats can be updated simultaneously from a single location. Plots and charts can also be produced from these notebooks, which can them be used across multiple output document formats. 

Please note that most of the documentation on John's [Data Wrangling quarto page](https://jjcurtin.github.io/book_dwvt/quarto.html) was written when we were creating each format type as a standalone. This information is still valid for that workflow. Differences related to projects will be noted in the appropriate section on that page.

Here are steps to set up a manuscript project:

1.  Create study repo for project on github in John's account (call it study_NAME)
2.  Add collaborators to the repo
3.  Clone the repo to your computer
4.  Create manuscript project files in the repo.  In the terminal (in github folder above new repo) type `quarto create project manuscript` and then indicate the name of the repo folder when asked
5.  Add a gh-pages branch to the repo. Do this in terminal with these commands
  - `git switch --orphan gh-pages`
  - `git commit --allow-empty -m "Initial commit on orphan branch"`
  - `git push -u origin gh-pages`

6. Set up github to publish website from the gh-pages branch.  Go to settings, pages, and select the gh-pages and /root as the branch to publish from. The website will be published at https://jjcurtin.github.io/study_NAME
